---
title: "Statistical Software Engineering : A Statisticianâ€™s technical journey in R"
subtitle: ""
author: "Audrey Yeo Te-Ying (F. Hoffman-La Roche)"
institute: "Basel Biostats Community Forum, 2024"
#institute: "PSI Amsterdam, NL 2024"
date: "2024-05-27"
#date: "2024-06-19"
date-format: long
license: 'CC BY-SA'
format: 
  revealjs:
    fontsize: 2rem
    slide-number: c/t
    toc: true
    toc-depth: 1
    footer : '[contact](https://audreyyeoch.github.io/)' #[License](http://creativecommons.org/licenses/by-sa/4.0/ #"License: CC BY-SA 4.0")'
preload-iframes: true
title-slide-attributes: 
  data-background-image: research-progress.png
  data-background-size: 30%
  data-background-opacity: "1"
  data-background-position: 95% 85%
---
## My Journey at F. Hoffman-La Roche

```{r}
source("timeline_reflection.R")
car_tl
```
## My Journey at DSX Part 1

-   Mathematics is Elegant. I enjoy finding computational solutions to real-life problems.
-   Software Engineering is attractive to me: It's creative work
-   Values of inclusion and accessibility : I an make accessible products e.g. in documentation, reliability and trustworthy product.
-   Neat work : I enjoy creating a neat, and delightful product for user experience.

## My Journey at DSX Part 2

-   DSX Onboarding : mid June - Aug 2023 at 70%
-   Current duration of rotation \~9 months
-   First Pull Request (PR) merged on Aug 29th 2023
-   Daily stand ups for 3 months then 1 month "break". From month 4 we had 3-5/ week stand ups
-   Task : re-factoring `phase1b` to current State of Art. `phase1b`is already available for use internally and have been used extensively in the pRED oncology space since 2015

::: notes
(large task: four functions, test files, and examples to clean) - Current tally : 9 Pull Requests, of which 7 were large ðŸ˜… in 7 months - Month 6, we changed tact to smaller PRs which meant that more was achieved in a shorter time span

this presentation is not a bunch of hot takes, it's only my journey
:::

## New knowledge and skills at DSX!

New skills are many and I am still learning them :

-   git kraken and branching
-   pre-commit checks
-   documentation, building documents and reviewing them
-   taking a reviewer perspective
-   Tools for package developers I incorporate in my practice : `roxygen`, `styler`, `prettier` , `testthat`, `checkmate` ...

## Phase1b package history

-   UNICYCLE is a decision framework born out of the methods team in \~2014, to guide decision making for single-arm or small randomised trials. The package `phase1b` was made to this end.
-   UNICYCLE was most recently in Nov 2022 ([by me](https://docs.google.com/presentation/d/1fcOXVF7A8to5uG_yxcsCzk-IyyjMw6Is4HrWti_RV38/edit#slide=id.g14e82d0c9c7_0_0)) at the Basel Knowledge Sharing Day, where I wrote my own facility to guide the ESPC[^1] and Oncology Forum for my molecule at that time, FAP-4-1BBL.
-   I used phase1b package to QC my work plus self-QC
-   I had Version Control
-   I did not use conventional names
-   no code review
-   no unit test

[^1]: Early Stage Portfolio Committee

<!-- -   Phase1b featured as far back as 2017 ([by Daniel](https://drive.google.com/file/d/1-dCBy-z6R5ABa4Uz2pLUxJO4Rz0ir4oD/view)) and 2018 (by [Francesca Michielin](https://docs.google.com/presentation/d/1HM_PJZohJbLr7Ij5bqiuK28TCQaH8a5c/edit#slide=id.p1)) -->

::: notes
```         
My perspective

which includes my privilege

how accessible other people are to me because of the languages I speak etc

my understanding of other cultures because I have had the privilege of traveling
```
:::

# What is refactoring ?

-   "Polishing an antique cup"

[Wikipedia :](https://en.wikipedia.org/wiki/Code_refactoring) "Refactoring is intended to improve the design, structure, and/or implementation of the [software](#0 "Software") (its [*non-functional*](#0 "Non-functional requirement") attributes), while preserving its [functionality](#0 "Functional requirement")."

[![18th Century Arita Porcelain Palace Bowl, Imari Style (JPN)](images/polished_cup.jpg){fig-align="center"}](https://www.proantic.com/en/1173695-arita-porcelain-palace-bowl-imari-style-japan-edo-beginning-of-the-18th-century.html)

## Tools for refactoring

-   Documentation that defines variables as `typed` defined, such that we assert more precisely what we can input into function calls. Package `roxygen2` is used for former. `checkmate`used for latter
-   Testing takes on the perspective of a reviewer and to ensure the function calls calculates what it says it calculates (they are my favourite). Package `testthat` and `checkmate` are used
-   Making `phase1b` a State of Art Software[^2] - reproducible, robust, testable, intuitive and open to collaboration

[^2]: Subject to a change in definition with better tools and practices

## Tools for refactoring 2

```{r, eval = FALSE}
library(roxygen2)
library(devtools)
roxygen2::roxygenise() # converts roxygen comments to .Rd files
devtools::document()  # R converts .Rd files to human readable documentation
# then Ctrl + Shift + D, if youâ€™re using RStudio.
```

::: notes
-   Provides functions that make it easy to describe what you expect a function to do, including catching errors, warnings, and messages.

-   Easily integrates in your existing workflow, whether itâ€™s informal testing on the command line, building test suites, or using R CMD check.

-   Displays test progress visually, showing a pass, fail, or error for every expectation. If youâ€™re using the terminal or a recent version of RStudio, itâ€™ll even colour the output.

-   resource for testing : <https://r-pkgs.org/testing-basics.html>
:::

## What is the Statistical Software Engineering Process ?

-   Create separate branch to main

-   Create issue then Pull Requests for :

1.  Design Document for entire function
2.  Work on ONE function
3.  Create Test files for helper functions
4.  Create Test files and example files for main function calls

Embrace small steps as smaller PRs can be sizeABLE.

## My phase1b journey so far

```{r}
# source("reflections_files/timeline_reflection.R")
# tl_phase1b_ 
```

## title

::: columns
::: {.column width="40%"}
Left column

hello
:::

::: {.column width="60%"}
Right column

how are you
:::
:::

::: notes
never be too clever you forget to be kind

h_predproblist_nocontrol -\> h_predprobdist_single_arm

small steps leave noting outeverything. makes sense

messaging in the commits

PR messaging

Needle in a haystack -\> yeah

we can be proud
:::

## Features of Statistical Software Engineering 1 of 2

<!-- What characterizes this kind of work: -->

::: columns
::: {.column width="50%"}
-   Moving parts
-   Forest vs Trees perspective
-   Metaphors are helpful to communicate goals
-   Requires focused and deep thinking
-   Small steps are good starts
:::

::: {.column width="50%"}
-   Systematic deduction is helpful
-   Lots of theory and reading literature about new methodology
-   Good engineering practices are like habits, needs automation which needs practice which needs time
:::
:::

::: notes
needle in haystack but in a systematic way that allows you to learn ...
:::

## [![](images/Misty_copeland.jpg)](https://www.rclassociation.org/schedule/misty-copeland/)Features of Statistical Software Engineering 2 of 2

-   Small PRs can be sizable in work too
-   Regular standups can feel pressured, but in the end I am glad they are bunched up together as long as expectations are managed
-   Work can be creative, but once foundation is there
-   It's fun!

Good collaboration and mentorship give space to the nature of this work

## What I learned in the 1 month of no standups

-   Standups are helpful
-   Develop systematic deduction
-   Fall on the engineering principles (testing, debugging, iteration, reliability, correctness...)
-   Think creatively of other solutions by myself

::: notes
"take small steps, leave no gaps, everything make sense" : small steps can be frustrating.

leacve no gaps, learners are expected to fill gaps. They are not bad things but it can be annoying for learners who are not quite sure about themselves.

rules of programming are rigit.

learning langauge, some effort and persistance. Some are faster, some are slower.

everything make sense to the teacher, it's sometimes up to us to ask about the gaps.

local and global scope in Julia

scope ; variables than can be accessed in a aprticular block of code

comprehension is a complete line of code that runs
:::

## Collaboration for `phase1b` work

-   Positive bias & Trust are win-win situations
-   Learning through mistakes is key
-   Safe space to be ask any questions and iterate
-   Collaboration works best when the features of this kind of work is accounted for

## What has worked well in standups and `phase1b` work 1 of 2

::: columns
::: {.column width="60%"}
-   Daniel is proactive in reaching out and allocating time to do standups, e.g. increasing frequency
-   Daniel is responsive to helping and is patient e.g. google hangouts to help unblock steps. Feedback turnover is quick and with example and rationale, then I can remember where exactly
-   PR has "conversations" and Daniel actually gives feedback on it
:::

::: {.column width="50%"}
-   I go back to the closed PRs to read the mistakes again, because this is about creating automation in myself
-   Being allowed to do the work, make mistakes, talk about theory
:::
:::

## Kinds of feedback

## ![](images/precise_title.png){width="400"}

![](images/typed_roxygen.png){width="400"}

## What has worked well in standups and `phase1b` work 2 of 2

-   Systematic deduction together, so I can see what kind of habits an expert has
-   Making an effort to teach again without resentment
-   Encouraging to go for presentations internally and externally as good milestones to develop further
-   Positive feedback but No over positiveness, always based on facts

## What I'm changing after learning about this kind of work

-   Create more conditions for focused, systematic, deep and creative work
-   Approach work slower because in the end there has been efficiency gains (Learning a new language)
-   Perceive small steps as good starts
-   Good software engineering is not overnight work, but slow and sustained good practices that requires an open mind

## Future outlook

-   Smaller PRs are working well
-   Standup formats are valuable, 1-2-3 times per week if needed
-   Making a cool HEX sticker and Logo for `phase1b`
-   Basel Biostats Presentation at 10h May 27th 2024
-   [PSI 2024 conference in Netherlands!](https://www.psiweb.org/conferences/about-the-conference)
-   Hopefully a presentation at useR!2024 conference in AT
-   Working on refactoring other packages and creating my own

## Reflections

-   Confidence in R Language
-   Learnt and honing my skills in Julia
-   [Julia learning helps me appreciate R in return](https://audreyyeoch.github.io/Julia.html)
-   Less likely to doubt myslf when I learn new things
-   No matter how much you've improved it's not permanent

## Acknowledgements

-   Daniel SabanÃ©s BovÃ©
-   ...and other colleagues at DSX

## What is your experience ?

I'd love to know how this presentation relates to you or does not !

::: notes
It takes a krane to make a krane send me a DM id love to know what you think about my reflection
:::

## References

\[quarto guide\] <https://quarto.org/docs/presentations/revealjs/>

[Blog about Julia and Software Engineering](https://audreyyeoch.github.io/StatsSoftware.html)

[Why We need to Improve SE in Biostatistics](https://danielinteractive.github.io/rpharma-2023-keynote/#/title-slide) October 26 2023 R/Pharma

Footnote license : https://creativecommons.org/licenses/by-sa/4.0/
