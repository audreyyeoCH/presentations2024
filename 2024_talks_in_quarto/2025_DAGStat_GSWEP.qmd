---
title: ""
author: Audrey Yeo, MSc Biostats
format: 
 revealjs:
    code-fold: false
    width: 1280
    height: 720
    chalkboard: true
editor: visual
footer: "DAGStat 2025 Berlin : Section 64 Innovations in Statistical Software and Methodology"
---

# Good Software Engineering Practice for R Packages

Audrey Yeo, MSc Biostatistics

\

\
\

***Acknowledgements to Daniel Sabanés Bové, all contributors to Zürich GSWE4R course***

# Introduction

::: small
1.  `Opinions do not reflect employer`

2.  `This presentation has ALT text and as much as possible, uses colour-blind friendly palettes`

3.  `Code for this Quarto-rendered .html will also be shared`
:::

# Acknowledgements and further events

::: small
-   Acknowledge my colleague Daniel Sabanés Bové

-   Slides adapted from

    -   [Zurich Good Software Engineering Practice](https://rconis.github.io/workshop-r-swe-zrh/listing.html) April 2024
    -   [Gearing Industry Statisticians up for Software Success](https://github.com/audreyyeoCH/presentations2024/blob/main/2024_pdfs_presentations/Yeo_GearingStatsSoftwareSuccess.qmd) September 2024

-   We're giving another course at [ISCB 2025](https://iscb2025.info/) in Basel on 24 August 2025
:::

# About me

```{r}
#| echo: FALSE
#| eval: TRUE
#| fig-alt:
#|  the phase1b logo, the openstats logo and finc research company logo
```

Audrey Yeo, MSc Biostats

`Research Statistician and Software Engineer`

::: center
![](images/hex3.png){width="20%"} ![](images/openstatsware-hex.svg){width="22%"} ![](images/finc3.png){width="19%"}
:::

## Objective for the next 15 minutes

The low hanging fruits of :

-   Attitudes and Motivation for GSWEP4R

-   R package structure

-   Workflow : From Ideation, Design to Production

-   Clean Code rules

-   Tests and Checks

-   Version control && Collaboration

# Attitude & Motivation

::: small
-   always learning
-   open to diverse approaches
-   striving for better approaches to build R packages that are
    -   reliable
    -   reusable
    -   easy to maintain
:::

## On GSWEP4R

::::: columns
::: {.column width="50%"}
### What:

-   improve quality and longevity of R code/packages

-   collection of best practices

-   Do not invent the wheel: learn from community
:::

::: {.column width="50%"}
### Why:

```         
R is one of the most successful statistical programming languages
```

-   powerful yet complex ecosystem

-   R packages are core

-   concepts applicable to other languages
:::
:::::

## Package Structure

`usethis::create_package()`

::::: columns
::: {.column width="50%"}
-   Mandatory:
    -   DESCRIPTION
    -   NAMESPACE
    -   R
    -   man
:::

::: {.column width="50%"}
-   Typically also includes:
    -   data
    -   inst
    -   src
    -   tests
    -   vignettes
    -   NEWS
:::
:::::

## R Package Engineering Workflow

### Typical work steps in practice

::::: columns
::: {.column width="50%"}
1.  Idea
2.  R package programming
3.  Use in production
4.  Bug fixing
5.  Use in production
:::

::: {.column width="50%"}
6.  Bug fixing + Documentation
7.  Use in production
8.  Bug fixing + Further development
9.  Use in production
10. Bug fixing + ...
:::
:::::

## Idea : Design Doc {.smaller}

::::: columns
::: {.column width="45%"}
<!-- , fig.alt="Cartoonish drawing of a dot rmd file depicting a Design Document with sections of purpose, loading relevant packages, list of input variables, helper function and user facing function -->
![](images/Design Doc.jpg){width="90%"}
:::

::: {.column width="50%"}
Any user-facing function that require breakdown, starts with Design-document

1.  Helps achieve Clarity on the form and purpose of the user-facing function

2.  Test regular and edge cases

3.  Makes the rest of the work "easier" when the goals are clear

4.  Most of the "skeleton" and "flesh" of the work can already be done in the because of 1-3
:::
:::::

## Source R code and `roxygen2` documentation

```{r}
#| echo: FALSE
#| eval: TRUE
#| fig-alt: "not a pic but a cut and paste of the R document with the helper function to showcase the
#| roxygen2 tags and the asserts to enforce input arguments"

#' Helper function for simulation result as input for `plotOc()`
#'
#' @inheritParams h_get_oc
#' @typed all_looks : numeric
#' original looks before adjustment by `wiggle = TRUE`, if applied.
#'
#' @return A data frame or tibble with the following variables :
#'  - `decision` : decision `flag` with `TRUE` for Go, `FALSE` for Stop, `NA` for Gray zone.
#'  - `look` : resulting number of look size, anything below maximum
#'   look size is an indicated interim, Futility or Efficacy or both.
#'  - `prop` : proportion of responders by `decision` and `look`.
#'
#' @keywords internal
#'
h_get_dataframe_oc <- function(decision, sample_size, all_looks) {
  assert_logical(decision)
  assert_numeric(sample_size)
  assert_numeric(all_looks)
  df <- data.frame(
    decision = decision,
    sample_size = sample_size,
    look = all_looks
  )
  # summarise into frequency table
  df <- df |>
    dplyr::group_by(decision, look) |>
    dplyr::summarise(prop = sum(length(decision)) / nrow(df)) |>
    tibble::as_tibble()
  # setting levels of factors
  all_decision <- c(TRUE, FALSE, NA)
  all_looks <- unique(sort(all_looks))
  df$decision <- factor(df$decision, levels = all_decision)
  df$look <- factor(df$look, levels = all_looks)
  df |>
    tidyr::complete(decision, look, fill = list(prop = 0))
}

#' Display the operating characteristics results using an `oc` object
#'
#' Plots results from simulated results of :
#' - `[ocPostprob()]`
#' - `[ocPostprobDist()]`
#' - `[ocPostpred()]`
#' - `[ocPostpredDist()]`
#' - `[ocRctPostprobDist()]`
#' - `[ocRctPredprobDist()]`
#'
#' @inheritParams h_get_dataframe_oc
#' @typed wiggle_status : flag
#' from `wiggle` flag in object.
#' @return ggplot object
#'
#' @example examples/plotOc.R
#'
#' @importFrom ggplot2 geom_bar ggtitle
#'
#' @export
#' @keywords graphics
plotOc <- function(decision, all_sizes, all_looks, wiggle_status) {
  assert_logical(decision)
  assert_numeric(all_sizes)
  assert_numeric(all_looks)
  assert_flag(wiggle_status)
  df <- h_get_dataframe_oc(
    decision = decision,
    all_sizes = all_sizes,
    all_looks = all_looks
  )
  barplot <-
    ggplot2::ggplot(df, ggplot2::aes(fill = decision, x = look, y = prop)) +
    ggplot2::geom_bar(position = "dodge", stat = "identity") +
    ggplot2::ggtitle(
      "Results from simulation : \nProportion of Go/Stop/Grey zone decisions per interim/final analysis"
    ) +
    ggplot2::theme(title = ggplot2::element_text(size = 13)) +
    ggplot2::ylab("percentage") +
    ggplot2::theme(axis.text.x = ggplot2::element_text(size = 12)) +
    ggplot2::xlab("look (n)") +
    ggplot2::scale_fill_manual(
      values = c("#009E73", "#FF0046", "lightgrey"),
      labels = c("Go", "Stop", "Grey zone")
    ) +
    ggplot2::labs(fill = "Decision")
  generic_title <-
    "Results from simulation : \nProportion of Go/Stop/Grey zone decisions per interim/final analysis"
  wiggle_warning_footnote <- paste("\nNote that sample sizes may differ slightly from the ones labeled")

  if (wiggle_status) {
    barplot +
      ggplot2::ggtitle(label = generic_title) +
      ggplot2::labs(caption = wiggle_warning_footnote) +
      ggplot2::theme(plot.caption = ggplot2::element_text(hjust = 0, size = 10))
  } else {
    barplot +
      ggplot2::ggtitle(generic_title)
  }
}
```

## `roxygen2` Output

```{r}
#| echo: FALSE
#| eval: TRUE
#| fig-alt: "the latex version of our roxygen2 tags from the R source code"
```

``` latex
% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotOc.R
\name{plotOc}
\alias{plotOc}
\title{Display the operating characteristics results using an \code{oc} object}
\usage{
plotOc(decision, sample_size, all_looks, wiggle_status)
}
\arguments{
\item{decision}{(\code{numeric}):\cr Go, Stop or Gray Zone decisions of all looks simulated \code{length(sim)} times.}

\item{all_looks}{(\code{numeric}):\cr original looks before adjustment by \code{wiggle = TRUE}, if applied.}

\item{wiggle_status}{(\code{flag}):\cr from \code{wiggle} flag in object.}
}
\value{
ggplot object
}
\description{
Plots results from simulated results of :
\itemize{
\item \verb{[ocPostprob()]}
\item \verb{[ocPostprobDist()]}
\item \verb{[ocPostpred()]}
\item \verb{[ocPostpredDist()]}
\item \verb{[ocRctPostprobDist()]}
\item \verb{[ocRctPredprobDist()]}
}
```

## `roxygen2` Output (cont'd)

```{r}
#| echo: FALSE
#| eval: TRUE
#| fig-alt: "the latex version of our roxygen2 tags from the R source code for NAMESPACE file"
```

`NAMESPACE`:

``` r
# Generated by roxygen2: do not edit by hand

export(plotOc)
```

## Summary of Clean Code Rules

1.  **Naming**: Use descriptive and meaningful names for variables, functions, and classes
2.  **Formatting**: Adhere to consistent indentation, spacing, and bracketing to make the code easy to read
3.  **Simplicity**: Keep the code as simple and straightforward as possible, avoiding unnecessary complexity
4.  **Single Responsibility Principle (SRP)**: Each function should have a single, well-defined purpose
5.  **Don't Repeat Yourself (DRY)**: Avoid duplication of code, either by reusing existing code or creating functions

## Summary of Clean Code Rules

6.  **Comments**: Use comments to explain the purpose of code blocks and to clarify complex logic
7.  **Error Handling**: Include error handling code to gracefully handle exceptions and unexpected situations
8.  **Test-Driven Development (TDD)**: Write tests for your code to ensure it behaves as expected and to catch bugs early
9.  **Refactoring**: Regularly refactor your code to keep it clean, readable, and maintainable
10. **Code Review**: Have other team members review your code to catch potential issues and improve its quality

## `tests` Folder

-   Where store the unit tests covering the functionality of the package
-   Get started with `usethis::use_testthat()` and `usethis::use_test()` and populate `tests/testthat` folder with unit tests
-   Rarely, tests cannot be run within `testthat` framework, then these can go into R scripts directly in `tests` directory
-   Can test for numerical "equality" (tolerance considered), or graphical snaps.

## Testing Example with `expect_equal()`

test-ocPredprob

```{r}
#| eval: FALSE
#| echo: TRUE
# oc_Predprob ----
test_that("the sum of Eff, Fut, Gray zone probability is 1", {
  set.seed(1989)
  expect_warning(results <- ocPredprob(
    nnE = c(10, 20),
    truep = 0.4,
    p0 = 0.25,
    tT = 0.6,
    phiL = 0.2,
    phiU = 0.8,
    parE = c(1, 1),
    sim = 50,
    wiggle = FALSE,
    decision1 = TRUE
  ), "Advise to use sim >= 50000 to achieve convergence")
  results <- sum(results$oc[5:7])
  expect_equal(results, 1)
})
```

## Testing Example with snaps

test-plotOc

```{r}
#| eval: FALSE
#| echo: TRUE
test_that("plotOc gives expected results for `ocPredprobDist` with different relativeDelta status", {
  set.seed(2025)
  expect_warning(res7 <- ocPredprobDist(
    nnE = c(10, 20, 30),
    truep = 0.40,
    deltaE = 0.10,
    deltaF = 0.10,
    relativeDelta = FALSE,
    tT = 0.6,
    phiU = 0.80,
    phiL = 0.20,
    parE = c(1, 1),
    parS = c(5, 25),
    weights = 1,
    weightsS = 1,
    sim = 50,
    wiggle = TRUE,
    decision1 = TRUE
  ))
  expect_warning(res8 <- ocPredprobDist(
    nnE = c(10, 20, 30),
    truep = 0.40,
    deltaE = 0.5,
    deltaF = 0.5,
    relativeDelta = TRUE,
    tT = 0.6,
    phiU = 0.80,
    phiFu = 0.7,
    parE = c(1, 1),
    parS = c(5, 25),
    weights = 1,
    weightsS = 1,
    sim = 50,
    nnF = c(10, 20, 30),
    wiggle = TRUE,
    decision1 = TRUE
  ))
  result1 <- plotOc(
    decision = res7$Decision,
    sample_size = res7$SampleSize,
    all_looks = res7$Looks,
    wiggle_status = res7$params$wiggle
  )
  result2 <- plotOc(
    decision = res8$Decision,
    sample_size = res8$SampleSize,
    all_looks = res8$Looks,
    wiggle_status = res8$params$wiggle
  )
  vdiffr::expect_doppelganger(
    title = "Plot of simulation result without relativeDelta for posterior predictive probability",
    fig = result1
  )
  vdiffr::expect_doppelganger(
    title = "Plot of simulation result with relativeDelta for posterior predictive probability",
    fig = result2
  )
})
```

## Some available `tests` {.smaller}

::: small
| Function name | Does code... |
|-------------------|-----------------------------------------------------|
| expect_condition | fulfill a condition? |
| expect_equal | return the expected value? |
| expect_error | throw an error? |
| expect_false | return 'FALSE'? |
| expect_gt | return a number greater than the expected value? |
| expect_gte | return a number greater or equal than the expected value? |
| expect_identical | return the expected value? |
| expect_invisible | return a invisible object? |
| expect_length | return a vector with the specified length? |
| expect_lt | return a number less than the expected value? |
| expect_lte | return a number less or equal than the expected value? |
:::

## More available tests {.smaller}

::: small
| Function name | Does code... |
|-------------------|-----------------------------------------------------|
| expect_no_condition | run without condition? |
| expect_no_error | run without error? |
| expect_no_message | run without message? |
| expect_no_warning | run without warning? |
| expect_silent | execute silently? |
| expect_true | return 'TRUE'? |
| expect_type | return an object inheriting from the expected base type? |
| expect_vector | return a vector with the expected size and/or prototype? |
| expect_visible | return a visible object? |
| expect_warning | throw warning? |
:::

## Checking the Package {.smaller}

::::: columns
::: {.column width="5%"}
:::

::: {.column width="50%"}
-   R comes with pre-defined check command for packages: "the R package checker" aka `R CMD check`
-   About 22 checks are run (so quite a lot), including things like:
    -   Can the package be installed?
    -   Is the code syntax ok?
    -   Is the documentation complete?
    -   Do tests run successfully?
    -   Do examples run successfully?
-   In RStudio: Build \> Check
-   In the console: `devtools::check()`
:::
:::::

## Building the Package

::: small
-   The R package folder can be compressed into a single package file
-   Typically we manually only build "source" package
    -   In RStudio: Build \> More \> Build Source Package
    -   In the console: `devtools::build()`
-   Makes it easy to share the package with others and submit to CRAN
:::

## Version Control and Collaboration {.smaller}

### A typical GitHub workflow {.scrollable}

:::::: columns
::: {.column width="45%"}
**Version Controlling**

-   many products available such as GitHub and GitLab
-   works with working alone or in a team
-   allows managing versions and work of many collaborators
-   simplifies the many changes people working togehter does
-   BASH code skills required
:::

::: {.column width="5%"}
:::

::: {.column width="45"}
**GitHub**

-   tidyverse, ggplot2, pharmaverse are on GitHub
-   allows automation of checks
-   extremely useful to enforce best-practices & quality
:::
::::::

# Personal remarks.

Creating the conditions for success, is also good practice

::::: columns
::: {.column width="20%"}
![](images/merged.png){height="20%"} ![](images/merged.png){height="20%"} ![](images/merged.png){height="20%"}
:::

::: {.column width="80%"}
-   Good Practice ***will evolve***
-   Safe space to be ask any questions, and iterate, even for a seasoned engineer is effective and efficient
-   Positive bias & Trust are win-win situations
-   Confidence through competence in learning good practices
-   Learning through mistakes is key
:::
:::::

# Thank you {background-iframe="less-lego/dist/index.html"}

:::::: columns
::: {.column width="30%"}
![](images/finc3.png){fig-align="center"}
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}


Audrey Yeo\
BSci MSc Biostats RN

-   [Finc Research](www.finc-research.com)
-   [LinkedIn](www.linkedin.com/in/audrey-yeo-8000)
-   [GitHub repo](github.com/audreyyeoCH)

`Research Statistician and Software Engineer`
:::
::::::

# References {.smaller}

-   [Zurich Good Software Engineering Practice](https://rconis.github.io/workshop-r-swe-zrh/listing.html) April 2024
-   [Gearing Industry Statisticians up for Software Success](https://github.com/audreyyeoCH/presentations2024/blob/main/2024_pdfs_presentations/Yeo_GearingStatsSoftwareSuccess.qmd) September 2024
-   [R Packages (2e)](https://r-pkgs.org/)
-   [Writing R Extensions](https://cran.r-project.org/doc/manuals/R-exts.html)
-   [Super technical details about R Markdown](https://www.youtube.com/watch?v=fiy32LjgGUE)
-   Cotton, R. (2017). Testing R Code (Illustrated Edition).\
    Taylor & Francis Inc. \[[Book](https://amzn.to/3Bk6elt)\]
-   Martin, R. (2008). Clean Code: A Handbook of Agile Software Craftsmanship (1st Edition). Prentice Hall. \[[Book](https://amzn.to/3IKuSS4)\]
-   Gillespie, C., & Lovelace, R. (2017). Efficient R Programming: A Practical Guide to Smarter Programming. O'Reilly UK Ltd. \[[Book](https://amzn.to/3GU8HUW) \| [Online](https://csgillespie.github.io/efficientR/)\]
-   Grolemund, G. (2014). Hands-On Programming with R: Write Your Own Functions and Simulations (1. Aufl.).\

# More references {.smaller}

-   O'Reilly and Associates. \[[Book](https://amzn.to/3QD7DeL) \| [Online](https://rstudio-education.github.io/hopr/)\]
-   Rupp, C., & SOPHISTen, die. (2009). Requirements-Engineering und -Management: Professionelle, iterative Anforderungsanalyse für die Praxis (5. Ed.). Carl Hanser Verlag GmbH & Co. KG. \[[Book](https://amzn.to/3DdwiBe)\]
-   Wickham, H. (2015). R Packages: Organize, Test, Document, and Share Your Code (1. Aufl.). O'Reilly and Associates. \[[Book](https://amzn.to/34U0Fyj) \| [Online](https://r-pkgs.org/)\]
-   Wickham, H. (2019). Advanced R, Second Edition.\
    Taylor & Francis Ltd. \[[Book](https://amzn.to/3uLnxLd) \| [Online](https://adv-r.hadley.nz/)\]
-   [Code for this
    talk](https://github.com/audreyyeoCH/presentations2024/tree/main/2024_talks_in_quarto)
-   **Inclusive Speaker Orientation [Linux
    Foundation](https://training.linuxfoundation.org/training/inclusive-speaker-orientation/)**

-   **Zeileis, Fisher, Hornik, Ihaka, McWhite, Murrell, Stauffer,
    Wilke (2020) colorspace: A Toolbox for Manipulating and Assessing
    Colors and Palettes. Journal of Statistical Software.**
    


